{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,MAAM,eAAe,GAAG,CAAC,KAAa,EAAE,GAAW,EAAE,EAAE,CACnD,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EACvD,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAEvE,wCAAwC;AACxC,MAAM,QAAQ,GAAG,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAE3C;;;;;GAKG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAyB,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE;IAC3F,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAC9B,OAAO,GAAG,CAAC;AACb,CAAC,EAAE,EAAE,CAAC,CAAC","sourcesContent":["/**\r\n * Method to generate letters between two letters\r\n * @param {string} start Start letter\r\n * @param {string} end End letter\r\n * @returns {string[]} Array of letters between start and end\r\n */\r\nconst generateLetters = (start: string, end: string) => \r\n    Array.from({ length: end.charCodeAt(0) - start.charCodeAt(0) + 1 }, \r\n               (_, i) => String.fromCharCode(start.charCodeAt(0) + i));\r\n\r\n// Generate alphabet letters from A to Z\r\nconst alphabet = generateLetters('A', 'Z');\r\n\r\n/**\r\n * Object with alphabet letters as keys and their values as values\r\n * @type {Record<string, number>}\r\n * @example\r\n * { A: 9, B: 18, C: 27, ... }\r\n */\r\nexport const alphabetValues = alphabet.reduce<Record<string, number>>((acc, letter, index) => {\r\n  acc[letter] = (index + 1) * 9;\r\n  return acc;\r\n}, {});\r\n"]}