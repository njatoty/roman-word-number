{"version":3,"file":"index.es.js","sources":["../src/alphabet.ts","../src/roman.ts","../src/index.ts"],"sourcesContent":["class AlphabetGenerator {\r\n  public static generate(start: string, end: string): string[] {\r\n    return Array.from(\r\n      { length: end.charCodeAt(0) - start.charCodeAt(0) + 1 },\r\n      (_, i) => String.fromCharCode(start.charCodeAt(0) + i)\r\n    );\r\n  }\r\n}\r\n\r\nclass AlphabetValue {\r\n  private alphabets: string[];\r\n  private multiplier: number = 9;\r\n\r\n  constructor(alphabets: string[]) {\r\n    this.multiplier = 9;\r\n    this.alphabets = alphabets;\r\n  }\r\n\r\n  /**\r\n   * Method to get alphabet values\r\n   * @returns {Record<string, number>}\r\n   */\r\n  public get(): string[] {\r\n    return this.alphabets;\r\n  }\r\n\r\n  /**\r\n   * Method to set multiplier\r\n   * @param {number} multiplier Multiplier\r\n   */\r\n  public setMultiplier(multiplier: number): void {\r\n    this.multiplier = multiplier;\r\n  }\r\n\r\n  /**\r\n   * Method to get alphabet values with multiplier\r\n   * @returns {Record<string, number>}\r\n   */\r\n  public getValues(): Record<string, number> {\r\n    return this.alphabets.reduce<Record<string, number>>(\r\n      (acc, letter, index) => {\r\n        acc[letter] = (index + 1) * this.multiplier;\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n  }\r\n}\r\n\r\nclass AlphabetLetter {\r\n  private alphabetLetters: string[];\r\n\r\n  constructor() {\r\n    this.alphabetLetters = AlphabetGenerator.generate(\"A\", \"Z\");\r\n  }\r\n\r\n  /**\r\n   * Method to omit letters\r\n   * @param {string[]} letters Letters to omit\r\n   */\r\n  public omit(letters: string[]): void {\r\n    this.alphabetLetters = this.alphabetLetters.filter(\r\n      (letter) => !letters.includes(letter)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method to get alphabet letters\r\n   * @returns {string[]}\r\n   */\r\n  public get(): string[] {\r\n    return this.alphabetLetters;\r\n  }\r\n}\r\n\r\nexport class Alphabet {\r\n  public alphabetLetters: AlphabetLetter;\r\n  public alphabetValue: AlphabetValue;\r\n\r\n  constructor() {\r\n    this.alphabetLetters = new AlphabetLetter();\r\n    this.alphabetValue = new AlphabetValue(this.alphabetLetters.get());\r\n  }\r\n\r\n  /**\r\n   * Method to calculate the value of a word\r\n   * @param {string} word Word to calculate\r\n   * @returns {number} Value of the word\r\n   */\r\n  public calculateWordValue(word: string): number {\r\n    if (!word) {\r\n      return 0;\r\n    } else {\r\n      return word\r\n        .toUpperCase()\r\n        .split(\"\")\r\n        .reduce(\r\n          (acc, letter) => acc + this.alphabetValue.getValues()[letter],\r\n          0\r\n        );\r\n    }\r\n  }\r\n}\r\n","const romanNumerals = {\r\n  I: 1,\r\n  V: 5,\r\n  X: 10,\r\n  L: 50,\r\n  C: 100,\r\n  D: 500,\r\n  M: 1000,\r\n};\r\n\r\ntype RomanNumeralKey = keyof typeof romanNumerals;\r\n\r\nclass RomanNumeral {\r\n  private numeral: typeof romanNumerals;\r\n\r\n  constructor() {\r\n    this.numeral = romanNumerals;\r\n  }\r\n  /**\r\n   * Method to add a Roman numeral\r\n   * @param letter\r\n   * @param value\r\n   * @returns {void}\r\n   */\r\n  public addRomanNumeral(letter: string, value: number): void {\r\n    this.numeral[letter as RomanNumeralKey] = value;\r\n  }\r\n\r\n  /**\r\n   * Method to update a Roman numeral\r\n   * @param letter\r\n   * @param value\r\n   * @returns {void}\r\n   * @memberof RomanNumeral\r\n   */\r\n  public updateRomanNumeral(letter: string, value: number): void {\r\n    this.numeral[letter as RomanNumeralKey] = value;\r\n  }\r\n\r\n  /**\r\n   * Method to set numeral\r\n   * @param numeral numeral\r\n   * @return {void}\r\n   */\r\n  public setNumeral(numeral: typeof romanNumerals): void {\r\n    Object.assign(romanNumerals, numeral);\r\n  }\r\n\r\n  /**\r\n   * Method to get numerals\r\n   * @returns {typeof romanNumerals}\r\n   */\r\n  public getNumeral(): typeof romanNumerals {\r\n    return this.numeral;\r\n  }\r\n}\r\n\r\nclass Transliterator {\r\n  private mapping: Record<string, RomanNumeralKey>;\r\n\r\n  constructor() {\r\n    this.mapping = {\r\n      U: \"V\",\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method to add a mapping\r\n   * @param {string} letter Letter\r\n   * @param {RomanNumeralKey} numeral Numeral\r\n   */\r\n  public addMapping(letter: string, numeral: RomanNumeralKey): void {\r\n    this.mapping[letter] = numeral;\r\n  }\r\n\r\n  /**\r\n   * Method to get mapping\r\n   * @returns {Record<string, RomanNumeralKey>}\r\n   */\r\n  public getMapping(): Record<string, RomanNumeralKey> {\r\n    return this.mapping;\r\n  }\r\n\r\n  /**\r\n   * Method to set transliterator\r\n   * @param {Record<string, RomanNumeralKey>} mapping Mapping\r\n   * @returns {void}\r\n   */\r\n  public setTransliterator(mapping: Record<string, RomanNumeralKey>): void {\r\n    this.mapping = mapping;\r\n  }\r\n\r\n  /**\r\n   * Method to update transliterator\r\n   * @param {string} letter Letter\r\n   * @param {RomanNumeralKey} numeral Numeral\r\n   * @returns {void}\r\n   */\r\n  public updateTransliterator(letter: string, numeral: RomanNumeralKey): void {\r\n    this.mapping[letter] = numeral;\r\n  }\r\n}\r\n\r\nexport class Roman {\r\n  public numeral: RomanNumeral;\r\n  public transliterator: Transliterator;\r\n\r\n  constructor() {\r\n    this.numeral = new RomanNumeral();\r\n    this.transliterator = new Transliterator();\r\n  }\r\n\r\n  /**\r\n   * Method to convert Roman numerals to numbers\r\n   * @param {string} roman Roman word\r\n   * @returns {number} Number\r\n   */\r\n  public romanNumeralToNumber(roman: string): number {\r\n    return roman\r\n      .toUpperCase()\r\n      .split(\"\")\r\n      .reduce((acc, numeral) => {\r\n        // get exeptions and numerals\r\n        const exeptions = this.transliterator.getMapping();\r\n        const numerals = this.numeral.getNumeral();\r\n        // get letter and current\r\n        const letter = exeptions[numeral] || numeral;\r\n        const current = numerals[letter] || 0;\r\n\r\n        return acc + current;\r\n      }, 0);\r\n  }\r\n}\r\n","import { Alphabet } from \"./alphabet\";\r\nimport { Roman } from \"./roman\";\r\n\r\nconst roman = new Roman();\r\nconst alphabet = new Alphabet();\r\n\r\nexport { Alphabet, Roman, alphabet, roman };\r\n"],"names":["AlphabetGenerator","generate","start","end","Array","from","length","charCodeAt","_","i","String","fromCharCode","AlphabetValue","alphabets","multiplier","constructor","this","get","setMultiplier","getValues","reduce","acc","letter","index","AlphabetLetter","alphabetLetters","omit","letters","filter","includes","Alphabet","alphabetValue","calculateWordValue","word","toUpperCase","split","romanNumerals","I","V","X","L","C","D","M","RomanNumeral","numeral","addRomanNumeral","value","updateRomanNumeral","setNumeral","Object","assign","getNumeral","Transliterator","mapping","U","addMapping","getMapping","setTransliterator","updateTransliterator","Roman","transliterator","romanNumeralToNumber","roman","exeptions","alphabet"],"mappings":"AAAA,MAAMA,EACG,eAAOC,CAASC,EAAeC,GACpC,OAAOC,MAAMC,KACX,CAAEC,OAAQH,EAAII,WAAW,GAAKL,EAAMK,WAAW,GAAK,IACpD,CAACC,EAAGC,IAAMC,OAAOC,aAAaT,EAAMK,WAAW,GAAKE,IAExD,EAGF,MAAMG,EACIC,UACAC,WAAqB,EAE7BC,WAAAA,CAAYF,GACVG,KAAKF,WAAa,EAClBE,KAAKH,UAAYA,CACnB,CAMOI,GAAAA,GACL,OAAOD,KAAKH,SACd,CAMOK,aAAAA,CAAcJ,GACnBE,KAAKF,WAAaA,CACpB,CAMOK,SAAAA,GACL,OAAOH,KAAKH,UAAUO,QACpB,CAACC,EAAKC,EAAQC,KACZF,EAAIC,IAAWC,EAAQ,GAAKP,KAAKF,WAC1BO,IAET,GAEJ,EAGF,MAAMG,EACIC,gBAERV,WAAAA,GACEC,KAAKS,gBAAkBzB,EAAkBC,SAAS,IAAK,IACzD,CAMOyB,IAAAA,CAAKC,GACVX,KAAKS,gBAAkBT,KAAKS,gBAAgBG,QACzCN,IAAYK,EAAQE,SAASP,IAElC,CAMOL,GAAAA,GACL,OAAOD,KAAKS,eACd,QAGWK,EACJL,gBACAM,cAEPhB,WAAAA,GACEC,KAAKS,gBAAkB,IAAID,EAC3BR,KAAKe,cAAgB,IAAInB,EAAcI,KAAKS,gBAAgBR,MAC9D,CAOOe,kBAAAA,CAAmBC,GACxB,OAAKA,EAGIA,EACJC,cACAC,MAAM,IACNf,QACC,CAACC,EAAKC,IAAWD,EAAML,KAAKe,cAAcZ,YAAYG,IACtD,GAPG,CAUX,ECrGF,MAAMc,EAAgB,CACpBC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IACHC,EAAG,IACHC,EAAG,KAKL,MAAMC,EACIC,QAER9B,WAAAA,GACEC,KAAK6B,QAAUT,CACjB,CAOOU,eAAAA,CAAgBxB,EAAgByB,GACrC/B,KAAK6B,QAAQvB,GAA6ByB,CAC5C,CASOC,kBAAAA,CAAmB1B,EAAgByB,GACxC/B,KAAK6B,QAAQvB,GAA6ByB,CAC5C,CAOOE,UAAAA,CAAWJ,GAChBK,OAAOC,OAAOf,EAAeS,EAC/B,CAMOO,UAAAA,GACL,OAAOpC,KAAK6B,OACd,EAGF,MAAMQ,EACIC,QAERvC,WAAAA,GACEC,KAAKsC,QAAU,CACbC,EAAG,IAEP,CAOOC,UAAAA,CAAWlC,EAAgBuB,GAChC7B,KAAKsC,QAAQhC,GAAUuB,CACzB,CAMOY,UAAAA,GACL,OAAOzC,KAAKsC,OACd,CAOOI,iBAAAA,CAAkBJ,GACvBtC,KAAKsC,QAAUA,CACjB,CAQOK,oBAAAA,CAAqBrC,EAAgBuB,GAC1C7B,KAAKsC,QAAQhC,GAAUuB,CACzB,QAGWe,EACJf,QACAgB,eAEP9C,WAAAA,GACEC,KAAK6B,QAAU,IAAID,EACnB5B,KAAK6C,eAAiB,IAAIR,CAC5B,CAOOS,oBAAAA,CAAqBC,GAC1B,OAAOA,EACJ7B,cACAC,MAAM,IACNf,QAAO,CAACC,EAAKwB,KAEZ,MAAMmB,EAAYhD,KAAK6C,eAAeJ,aAMtC,OAAOpC,GALUL,KAAK6B,QAAQO,aAEfY,EAAUnB,IAAYA,IACD,EAEhB,GACnB,EACP,EChIF,MAAMkB,EAAQ,IAAIH,EACZK,EAAW,IAAInC"}